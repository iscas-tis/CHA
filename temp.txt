List(DeletedAnnotation(firrtl.options.Stage$$anon$1,ChiselGeneratorAnnotation(counter.CounterFormal$$$Lambda$77/0x0000000840189440@45ca843)), DeletedAnnotation(firrtl.options.Stage$$anon$1,RunFirrtlTransformAnnotation(firrtl.HighFirrtlEmitter@11c9af63)), DeletedAnnotation(chisel3.stage.phases.MaybeFirrtlStage,FirrtlCircuitAnnotation(Circuit(,List(Module(,Counter,List(Port(,clock,Input,ClockType), Port(,reset,Input,UIntType(IntWidth(1))), Port(,io,Output,BundleType(Vector(Field(en,Flip,UIntType(IntWidth(1))), Field(dout,Default,UIntType(IntWidth(5))))))),Block(Queue(DefRegister( @[Counter.scala 11:25],countReg,UIntType(IntWidth(5)),Reference(clock,UnknownType,UnknownKind,UnknownFlow),Reference(reset,UnknownType,UnknownKind,UnknownFlow),UIntLiteral(0,IntWidth(5))), Conditionally( @[Counter.scala 13:15],SubField(Reference(io,UnknownType,UnknownKind,UnknownFlow),en,UnknownType,UnknownFlow),Block(Queue(DefNode( @[Counter.scala 14:26],_countReg_T,DoPrim(add,ArraySeq(Reference(countReg,UnknownType,UnknownKind,UnknownFlow), UIntLiteral(1,IntWidth(1))),ArraySeq(),UnknownType)), DefNode( @[Counter.scala 14:26],_countReg_T_1,DoPrim(tail,ArraySeq(Reference(_countReg_T,UnknownType,UnknownKind,UnknownFlow)),ArraySeq(1),UnknownType)), Connect( @[Counter.scala 14:14],Reference(countReg,UnknownType,UnknownKind,UnknownFlow),Reference(_countReg_T_1,UnknownType,UnknownKind,UnknownFlow)))),EmptyStmt), Connect( @[Counter.scala 17:11],SubField(Reference(io,UnknownType,UnknownKind,UnknownFlow),dout,UnknownType,UnknownFlow),Reference(countReg,UnknownType,UnknownKind,UnknownFlow)))))),Counter))), DeletedAnnotation(chisel3.stage.phases.MaybeFirrtlStage,RunFirrtlTransformAnnotation(firrtl.HighFirrtlEmitter@11c9af63)), DeletedAnnotation(firrtl.options.Stage$$anon$1,FirrtlCircuitAnnotation(Circuit(,List(Module(,Counter,List(Port(,clock,Input,ClockType), Port(,reset,Input,UIntType(IntWidth(1))), Port(,io,Output,BundleType(Vector(Field(en,Flip,UIntType(IntWidth(1))), Field(dout,Default,UIntType(IntWidth(5))))))),Block(Queue(DefRegister( @[Counter.scala 11:25],countReg,UIntType(IntWidth(5)),Reference(clock,UnknownType,UnknownKind,UnknownFlow),Reference(reset,UnknownType,UnknownKind,UnknownFlow),UIntLiteral(0,IntWidth(5))), Conditionally( @[Counter.scala 13:15],SubField(Reference(io,UnknownType,UnknownKind,UnknownFlow),en,UnknownType,UnknownFlow),Block(Queue(DefNode( @[Counter.scala 14:26],_countReg_T,DoPrim(add,ArraySeq(Reference(countReg,UnknownType,UnknownKind,UnknownFlow), UIntLiteral(1,IntWidth(1))),ArraySeq(),UnknownType)), DefNode( @[Counter.scala 14:26],_countReg_T_1,DoPrim(tail,ArraySeq(Reference(_countReg_T,UnknownType,UnknownKind,UnknownFlow)),ArraySeq(1),UnknownType)), Connect( @[Counter.scala 14:14],Reference(countReg,UnknownType,UnknownKind,UnknownFlow),Reference(_countReg_T_1,UnknownType,UnknownKind,UnknownFlow)))),EmptyStmt), Connect( @[Counter.scala 17:11],SubField(Reference(io,UnknownType,UnknownKind,UnknownFlow),dout,UnknownType,UnknownFlow),Reference(countReg,UnknownType,UnknownKind,UnknownFlow)))))),Counter))), DeletedAnnotation(firrtl.options.Stage$$anon$1,RunFirrtlTransformAnnotation(firrtl.HighFirrtlEmitter@11c9af63)), DeletedAnnotation(firrtl.stage.phases.Compiler,FirrtlCircuitAnnotation(Circuit(,List(Module(,Counter,List(Port(,clock,Input,ClockType), Port(,reset,Input,UIntType(IntWidth(1))), Port(,io,Output,BundleType(Vector(Field(en,Flip,UIntType(IntWidth(1))), Field(dout,Default,UIntType(IntWidth(5))))))),Block(Queue(DefRegister( @[Counter.scala 11:25],countReg,UIntType(IntWidth(5)),Reference(clock,UnknownType,UnknownKind,UnknownFlow),Reference(reset,UnknownType,UnknownKind,UnknownFlow),UIntLiteral(0,IntWidth(5))), Conditionally( @[Counter.scala 13:15],SubField(Reference(io,UnknownType,UnknownKind,UnknownFlow),en,UnknownType,UnknownFlow),Block(Queue(DefNode( @[Counter.scala 14:26],_countReg_T,DoPrim(add,ArraySeq(Reference(countReg,UnknownType,UnknownKind,UnknownFlow), UIntLiteral(1,IntWidth(1))),ArraySeq(),UnknownType)), DefNode( @[Counter.scala 14:26],_countReg_T_1,DoPrim(tail,ArraySeq(Reference(_countReg_T,UnknownType,UnknownKind,UnknownFlow)),ArraySeq(1),UnknownType)), Connect( @[Counter.scala 14:14],Reference(countReg,UnknownType,UnknownKind,UnknownFlow),Reference(_countReg_T_1,UnknownType,UnknownKind,UnknownFlow)))),EmptyStmt), Connect( @[Counter.scala 17:11],SubField(Reference(io,UnknownType,UnknownKind,UnknownFlow),dout,UnknownType,UnknownFlow),Reference(countReg,UnknownType,UnknownKind,UnknownFlow)))))),Counter))), DeletedAnnotation(firrtl.stage.phases.Compiler,RunFirrtlTransformAnnotation(firrtl.HighFirrtlEmitter@11c9af63)), FirrtlCircuitAnnotation(Circuit(,List(Module(,Counter,List(Port(,clock,Input,ClockType), Port(,reset,Input,UIntType(IntWidth(1))), Port(,io,Output,BundleType(Vector(Field(en,Flip,UIntType(IntWidth(1))), Field(dout,Default,UIntType(IntWidth(5))))))),Block(List(DefRegister( @[Counter.scala 11:25],countReg,UIntType(IntWidth(5)),Reference(clock,ClockType,PortKind,SourceFlow),Reference(reset,UIntType(IntWidth(1)),PortKind,SourceFlow),UIntLiteral(0,IntWidth(5))), Conditionally( @[Counter.scala 13:15],SubField(Reference(io,BundleType(Vector(Field(en,Flip,UIntType(IntWidth(1))), Field(dout,Default,UIntType(IntWidth(5))))),PortKind,SinkFlow),en,UIntType(IntWidth(1)),SourceFlow),Block(List(DefNode( @[Counter.scala 14:26],_countReg_T,DoPrim(add,ArraySeq(Reference(countReg,UIntType(IntWidth(5)),RegKind,SourceFlow), UIntLiteral(1,IntWidth(1))),ArraySeq(),UIntType(IntWidth(6)))), DefNode( @[Counter.scala 14:26],_countReg_T_1,DoPrim(tail,ArraySeq(Reference(_countReg_T,UIntType(IntWidth(6)),NodeKind,SourceFlow)),ArraySeq(1),UIntType(IntWidth(5)))), Connect( @[Counter.scala 14:14],Reference(countReg,UIntType(IntWidth(5)),RegKind,SinkFlow),Reference(_countReg_T_1,UIntType(IntWidth(5)),NodeKind,SourceFlow)))),EmptyStmt), Connect( @[Counter.scala 17:11],SubField(Reference(io,BundleType(Vector(Field(en,Flip,UIntType(IntWidth(1))), Field(dout,Default,UIntType(IntWidth(5))))),PortKind,SinkFlow),dout,UIntType(IntWidth(5)),SinkFlow),Reference(countReg,UIntType(IntWidth(5)),RegKind,SourceFlow)))))),Counter)), EmittedFirrtlCircuitAnnotation(EmittedFirrtlCircuit(Counter,circuit Counter :
  module Counter :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip en : UInt<1>, dout : UInt<5>}

    reg countReg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Counter.scala 11:25]
    when io.en : @[Counter.scala 13:15]
      node _countReg_T = add(countReg, UInt<1>("h1")) @[Counter.scala 14:26]
      node _countReg_T_1 = tail(_countReg_T, 1) @[Counter.scala 14:26]
      countReg <= _countReg_T_1 @[Counter.scala 14:14]
    io.dout <= countReg @[Counter.scala 17:11]
,.hi.fir)), TargetDirAnnotation(build), EmitCircuitAnnotation(class firrtl.HighFirrtlEmitter), DesignAnnotation(counter.Counter@1450078a), ChiselCircuitAnnotation(Circuit(Counter,List(DefModule(counter.Counter@1450078a,Counter,List(Port(Clock(IO clock in Counter),Input), Port(Bool(IO reset in Counter),Input), Port(AnonymousBundle(IO io in Counter),Unspecified)),List(DefRegInit(SourceLine(Counter.scala,11,25),UInt<5>(Reg in Counter),Node(Clock(IO clock in Counter)),Node(Bool(IO reset in Counter)),ULit(0,<5>)), WhenBegin(SourceLine(Counter.scala,13,15),Node(Bool(IO io_en in Counter))), DefPrim(SourceLine(Counter.scala,14,26),UInt<6>(OpResult in Counter),add,ArraySeq(Node(UInt<5>(Reg in Counter)), ULit(1,))), DefPrim(SourceLine(Counter.scala,14,26),UInt<5>(OpResult in Counter),tail,ArraySeq(Node(UInt<6>(OpResult in Counter)), ILit(1))), Connect(SourceLine(Counter.scala,14,14),Node(UInt<5>(Reg in Counter)),Node(UInt<5>(OpResult in Counter))), WhenEnd(SourceLine(Counter.scala,13,15),0,false), Connect(SourceLine(Counter.scala,17,11),Node(UInt<5>(IO io_dout in Counter)),Node(UInt<5>(Reg in Counter)))))),List(),firrtl.RenameMap@46d8f407)), DeletedAnnotation(chisel3.stage.phases.Elaborate,ChiselGeneratorAnnotation(counter.CounterFormal$$$Lambda$77/0x0000000840189440@45ca843)), ChiselOutputFileAnnotation(Counter), OutputAnnotationFileAnnotation(Counter), CircuitSerializationAnnotation(Circuit(Counter,List(DefModule(counter.Counter@1450078a,Counter,List(Port(Clock(IO clock in Counter),Input), Port(Bool(IO reset in Counter),Input), Port(AnonymousBundle(IO io in Counter),Unspecified)),List(DefRegInit(SourceLine(Counter.scala,11,25),UInt<5>(Reg in Counter),Node(Clock(IO clock in Counter)),Node(Bool(IO reset in Counter)),ULit(0,<5>)), WhenBegin(SourceLine(Counter.scala,13,15),Node(Bool(IO io_en in Counter))), DefPrim(SourceLine(Counter.scala,14,26),UInt<6>(OpResult in Counter),add,ArraySeq(Node(UInt<5>(Reg in Counter)), ULit(1,))), DefPrim(SourceLine(Counter.scala,14,26),UInt<5>(OpResult in Counter),tail,ArraySeq(Node(UInt<6>(OpResult in Counter)), ILit(1))), Connect(SourceLine(Counter.scala,14,14),Node(UInt<5>(Reg in Counter)),Node(UInt<5>(OpResult in Counter))), WhenEnd(SourceLine(Counter.scala,13,15),0,false), Connect(SourceLine(Counter.scala,17,11),Node(UInt<5>(IO io_dout in Counter)),Node(UInt<5>(Reg in Counter)))))),List(),firrtl.RenameMap@46d8f407),Counter,FirrtlFileFormat), InfoModeAnnotation(use), BlackBoxTargetDirAnno(build), OutputFileAnnotation(Counter))